<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Ctwing_SKIT_BC28\Ctwing_SKIT_BC28.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Ctwing_SKIT_BC28\Ctwing_SKIT_BC28.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Aug 15 09:45:18 2020
<BR><P>
<H3>Maximum Stack Usage =        452 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
bc28_init_thread_entry &rArr; bc28_get_module_stats &rArr; at_send_cmd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[20]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC1_2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[23]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[24]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[19]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[14]">EXTI0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[36]">EXTI15_10_IRQHandler</a> from stm32f1xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[15]">EXTI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[16]">EXTI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[17]">EXTI3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[18]">EXTI4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[25]">EXTI9_5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[12]">FLASH_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2e]">I2C1_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2d]">I2C1_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[30]">I2C2_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2f]">I2C2_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[f]">PVD_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[13]">RCC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[37]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[11]">RTC_IRQHandler</a> from stm32f1xx_it.o(i.RTC_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[31]">SPI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[32]">SPI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from board.o(i.SysTick_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3a]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[10]">TAMPER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[26]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[29]">TIM1_CC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[28]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[27]">TIM1_UP_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2a]">TIM2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2b]">TIM3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2c]">TIM4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[33]">USART1_IRQHandler</a> from stm32f1xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[34]">USART2_IRQHandler</a> from stm32f1xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[35]">USART3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[38]">USBWakeUp_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[21]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[22]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[e]">WWDG_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[3c]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[0]">bc28_init_thread_entry</a> from bc28_thread.o(i.bc28_init_thread_entry) referenced 2 times from user_main.o(.data)
 <LI><a href="#[57]">calibration_rtc_from_iot_module</a> from com.o(i.calibration_rtc_from_iot_module) referenced from com.o(FSymTab)
 <LI><a href="#[54]">cmd_free</a> from msh.o(i.cmd_free) referenced from msh.o(FSymTab)
 <LI><a href="#[53]">cmd_ps</a> from msh.o(i.cmd_ps) referenced from msh.o(FSymTab)
 <LI><a href="#[56]">datetime</a> from com.o(i.datetime) referenced from com.o(FSymTab)
 <LI><a href="#[45]">finsh_system_init</a> from shell.o(i.finsh_system_init) referenced from shell.o(.rti_fn.6)
 <LI><a href="#[3f]">finsh_thread_entry</a> from shell.o(i.finsh_thread_entry) referenced from shell.o(i.finsh_system_init)
 <LI><a href="#[48]">hello</a> from cmd.o(i.hello) referenced from cmd.o(FSymTab)
 <LI><a href="#[3]">iot_check_net_status_entry</a> from iot_thread.o(i.iot_check_net_status_entry) referenced 2 times from iot_thread.o(.data)
 <LI><a href="#[2]">iot_recv_data_deal_entry</a> from iot_thread.o(i.iot_recv_data_deal_entry) referenced 2 times from iot_thread.o(.data)
 <LI><a href="#[1]">led_task_entry</a> from user_main.o(i.led_task_entry) referenced 2 times from user_main.o(.data)
 <LI><a href="#[50]">list</a> from cmd.o(i.list) referenced from cmd.o(FSymTab)
 <LI><a href="#[4c]">list_event</a> from cmd.o(i.list_event) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[4e]">list_mailbox</a> from cmd.o(i.list_mailbox) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[47]">list_mem</a> from mem.o(i.list_mem) referenced from mem.o(FSymTab)
 <LI><a href="#[4d]">list_mutex</a> from cmd.o(i.list_mutex) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[4b]">list_sem</a> from cmd.o(i.list_sem) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[4a]">list_thread</a> from cmd.o(i.list_thread) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[4f]">list_timer</a> from cmd.o(i.list_timer) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[39]">main</a> from components.o(i.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[40]">main_thread_entry</a> from components.o(i.main_thread_entry) referenced from components.o(i.rt_application_init)
 <LI><a href="#[51]">msh_help</a> from msh.o(i.msh_help) referenced from msh.o(FSymTab)
 <LI><a href="#[52]">reboot</a> from msh.o(i.reboot) referenced from msh.o(FSymTab)
 <LI><a href="#[55]">reboot_module</a> from com.o(i.reboot_module) referenced from com.o(FSymTab)
 <LI><a href="#[3d]">rt_thread_exit</a> from thread.o(i.rt_thread_exit) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[41]">rt_thread_idle_entry</a> from idle.o(i.rt_thread_idle_entry) referenced from idle.o(i.rt_thread_idle_init)
 <LI><a href="#[3e]">rt_thread_timeout</a> from thread.o(i.rt_thread_timeout) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[44]">rti_board_end</a> from components.o(i.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[43]">rti_board_start</a> from components.o(i.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[46]">rti_end</a> from components.o(i.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[42]">rti_start</a> from components.o(i.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[49]">version</a> from cmd.o(i.version) referenced 2 times from cmd.o(FSymTab)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[179]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[58]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[17a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[17b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[17c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[17d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[17e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[121]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[122]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[157]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[158]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[162]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[17f]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[180]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToHex
</UL>

<P><STRONG><a name="[5b]"></a>mktime</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_module_time
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc28_get_module_info
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[181]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[182]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_cmd
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_recv_data_deal_entry
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bc28_auto_registration
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc28_set_para
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc28_get_module_stats
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc28_get_module_info
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_check_net_status_entry
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_module_time
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[10c]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[f4]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_cmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bc28_auto_registration
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc28_get_module_stats
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc28_get_module_info
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_urc_data_deal
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_check_net_status_entry
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_module_time
</UL>

<P><STRONG><a name="[109]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[f1]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_cmd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reporttime_DecodeCmdDown
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_onoff_DecodeCmdDown
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_speed_control_DecodeCmdDown
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_power_consumption_DecodeCmdDown
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeCmdDownFromStr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[10b]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[11d]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
</UL>

<P><STRONG><a name="[60]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc28_get_module_stats
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_module_time
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetTemperature
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetHumidity
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetTemperature
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetHumidity
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetTemperature
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetHumidity
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetTemperature
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetHumidity
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Calibration
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetTemperature
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetHumidity
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Calibration
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Calibration
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetHumidity
</UL>

<P><STRONG><a name="[12b]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6e]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_set_time
</UL>

<P><STRONG><a name="[5c]"></a>_localtime</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[62]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[186]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[64]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[59]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[187]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[188]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[189]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[70]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[74]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[73]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7b]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[18a]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_hw_board_init &rArr; SystemClock_Config &rArr; MX_RTC_Init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_set_time
</UL>

<P><STRONG><a name="[7e]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>HAL_GPIO_Init</STRONG> (Thumb, 766 bytes, Stack size 36 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>

<P><STRONG><a name="[11c]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[d8]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task_entry
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[cb]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[83]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[7f]"></a>HAL_I2C_Init</STRONG> (Thumb, 422 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[82]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 772 bytes, Stack size 48 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
</UL>

<P><STRONG><a name="[87]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
</UL>

<P><STRONG><a name="[80]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[8c]"></a>HAL_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[8e]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[8f]"></a>HAL_MspInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[aa]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[91]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[8d]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a9]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f1xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[94]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[96]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[97]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[99]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[81]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[95]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[98]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[9a]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1114 bytes, Stack size 24 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Delay
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[cf]"></a>HAL_RTCEx_BKUPRead</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTCEx_BKUPRead
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[155]"></a>HAL_RTCEx_BKUPWrite</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f1xx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTCEx_BKUPWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_set_time
</UL>

<P><STRONG><a name="[9c]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stm32f1xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_RTC_GetDate &rArr; HAL_RTC_GetTime &rArr; RTC_DateUpdate &rArr; RTC_WeekDayNum
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime
</UL>

<P><STRONG><a name="[9d]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, stm32f1xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_RTC_GetTime &rArr; RTC_DateUpdate &rArr; RTC_WeekDayNum
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteTimeCounter
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteAlarmCounter
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadTimeCounter
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadAlarmCounter
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DateUpdate
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime
</UL>

<P><STRONG><a name="[a4]"></a>HAL_RTC_Init</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, stm32f1xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[a5]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[ab]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, stm32f1xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_WriteTimeCounter &rArr; RTC_ExitInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteTimeCounter
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteAlarmCounter
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WeekDayNum
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadTimeCounter
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadAlarmCounter
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_set_time
</UL>

<P><STRONG><a name="[ae]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, stm32f1xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_WriteTimeCounter &rArr; RTC_ExitInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteTimeCounter
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteAlarmCounter
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadAlarmCounter
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_set_time
</UL>

<P><STRONG><a name="[a6]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f1xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[90]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[d3]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[af]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[b0]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC4_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[b5]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Init &rArr; HAL_TIM_PWM_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[b6]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[b8]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[ba]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[bb]"></a>HAL_UART_MspInit</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[bd]"></a>HAL_UART_Transmit</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_cmd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot_module
</UL>

<P><STRONG><a name="[bf]"></a>HTS221_Calibration</STRONG> (Thumb, 548 bytes, Stack size 48 bytes, hts221.o(i.HTS221_Calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HTS221_Calibration &rArr; I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init
</UL>

<P><STRONG><a name="[c1]"></a>HTS221_GetHumidity</STRONG> (Thumb, 442 bytes, Stack size 56 bytes, hts221.o(i.HTS221_GetHumidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_GetHumidity &rArr; I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[c6]"></a>HTS221_GetTemperature</STRONG> (Thumb, 354 bytes, Stack size 56 bytes, hts221.o(i.HTS221_GetTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_GetTemperature &rArr; I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[c7]"></a>HTS221_who_am_i</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hts221.o(i.HTS221_who_am_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HTS221_who_am_i &rArr; I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init
</UL>

<P><STRONG><a name="[ca]"></a>MX_GPIO_Init</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_GPIO_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[cc]"></a>MX_I2C1_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, i2c.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[cd]"></a>MX_RTC_Init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, rtc.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MX_RTC_Init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[d1]"></a>MX_TIM3_Init</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, tim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[d4]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[d5]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_IRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[12e]"></a>SetMotorSpeed</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, com.o(i.SetMotorSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_speed_control_DecodeCmdDown
</UL>

<P><STRONG><a name="[da]"></a>StrToHex</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, aepservicecodes.o(i.StrToHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = StrToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reporttime_DecodeCmdDown
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_onoff_DecodeCmdDown
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_speed_control_DecodeCmdDown
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_power_consumption_DecodeCmdDown
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeCmdDownFromStr
</UL>

<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>SystemClock_Config</STRONG> (Thumb, 160 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = SystemClock_Config &rArr; MX_RTC_Init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[13c]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f1xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[3a]"></a>SystemInit</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[b9]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[b2]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[33]"></a>USART1_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; rt_ringbuffer_putchar &rArr; rt_ringbuffer_data_len
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART2_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART2_IRQHandler &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18c]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[12c]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[18d]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[18e]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[61]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[18f]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[156]"></a>__rt_ffs</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, kservice.o(i.__rt_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[190]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[191]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[192]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[116]"></a>aep_htoni</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, aepservicecodes.o(i.aep_htoni))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_power_consumption_DecodeCmdDown
</UL>

<P><STRONG><a name="[102]"></a>aep_htons</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aepservicecodes.o(i.aep_htons))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reporttime_DecodeCmdDown
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_speed_control_DecodeCmdDown
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeCmdDownFromStr
</UL>

<P><STRONG><a name="[f0]"></a>at_send_cmd</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, com.o(i.at_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = at_send_cmd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc28_set_para
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc28_get_module_stats
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc28_get_module_info
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_check_net_status_entry
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_module_time
</UL>

<P><STRONG><a name="[f5]"></a>bc28_get_module_info</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, bc28_thread.o(i.bc28_get_module_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = bc28_get_module_info &rArr; at_send_cmd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_cmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc28_init_thread_entry
</UL>

<P><STRONG><a name="[f7]"></a>bc28_get_module_stats</STRONG> (Thumb, 256 bytes, Stack size 224 bytes, bc28_thread.o(i.bc28_get_module_stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = bc28_get_module_stats &rArr; at_send_cmd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_cmd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc28_init_thread_entry
</UL>

<P><STRONG><a name="[0]"></a>bc28_init_thread_entry</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bc28_thread.o(i.bc28_init_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = bc28_init_thread_entry &rArr; bc28_get_module_stats &rArr; at_send_cmd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_creat_user_task
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_rtc_from_iot_module
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bc28_auto_registration
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc28_set_para
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc28_get_module_stats
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc28_get_module_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_main.o(.data)
</UL>
<P><STRONG><a name="[f9]"></a>bc28_set_para</STRONG> (Thumb, 36 bytes, Stack size 56 bytes, bc28_thread.o(i.bc28_set_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = bc28_set_para &rArr; at_send_cmd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc28_init_thread_entry
</UL>

<P><STRONG><a name="[57]"></a>calibration_rtc_from_iot_module</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, com.o(i.calibration_rtc_from_iot_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = calibration_rtc_from_iot_module &rArr; get_module_time &rArr; at_send_cmd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_set_time
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_module_time
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc28_init_thread_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(FSymTab)
</UL>
<P><STRONG><a name="[f8]"></a>check_bc28_auto_registration</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, bc28_thread.o(i.check_bc28_auto_registration))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = check_bc28_auto_registration &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc28_init_thread_entry
</UL>

<P><STRONG><a name="[54]"></a>cmd_free</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, msh.o(i.cmd_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = cmd_free &rArr; list_mem &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[53]"></a>cmd_ps</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, msh.o(i.cmd_ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = cmd_ps &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[fe]"></a>creat_user_task</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, user_main.o(i.creat_user_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = creat_user_task &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[154]"></a>dec2hex</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, com.o(i.dec2hex))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_set_time
</UL>

<P><STRONG><a name="[101]"></a>decodeCmdDownFromStr</STRONG> (Thumb, 360 bytes, Stack size 48 bytes, aepservicecodes.o(i.decodeCmdDownFromStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = decodeCmdDownFromStr &rArr; set_reporttime_DecodeCmdDown &rArr; StrToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reporttime_DecodeCmdDown
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_onoff_DecodeCmdDown
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_speed_control_DecodeCmdDown
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_power_consumption_DecodeCmdDown
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htons
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToHex
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_urc_data_deal
</UL>

<P><STRONG><a name="[108]"></a>finsh_get_prompt</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, shell.o(i.finsh_get_prompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_get_prompt &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[112]"></a>finsh_set_prompt_mode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, shell.o(i.finsh_set_prompt_mode))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[10f]"></a>finsh_system_function_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(i.finsh_system_function_init))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[45]"></a>finsh_system_init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, shell.o(i.finsh_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = finsh_system_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_function_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[3f]"></a>finsh_thread_entry</STRONG> (Thumb, 936 bytes, Stack size 0 bytes, shell.o(i.finsh_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = finsh_thread_entry &rArr; msh_exec &rArr; _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(i.finsh_system_init)
</UL>
<P><STRONG><a name="[fc]"></a>get_module_time</STRONG> (Thumb, 232 bytes, Stack size 120 bytes, com.o(i.get_module_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = get_module_time &rArr; at_send_cmd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_cmd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_rtc_from_iot_module
</UL>

<P><STRONG><a name="[104]"></a>get_power_consumption_DecodeCmdDown</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, aepservicecodes.o(i.get_power_consumption_DecodeCmdDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_power_consumption_DecodeCmdDown &rArr; StrToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htoni
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToHex
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeCmdDownFromStr
</UL>

<P><STRONG><a name="[48]"></a>hello</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(i.hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = hello &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[3]"></a>iot_check_net_status_entry</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, iot_thread.o(i.iot_check_net_status_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = iot_check_net_status_entry &rArr; at_send_cmd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_cmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_thread.o(.data)
</UL>
<P><STRONG><a name="[fa]"></a>iot_creat_user_task</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, iot_thread.o(i.iot_creat_user_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = iot_creat_user_task &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc28_init_thread_entry
</UL>

<P><STRONG><a name="[2]"></a>iot_recv_data_deal_entry</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, iot_thread.o(i.iot_recv_data_deal_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = iot_recv_data_deal_entry &rArr; recv_urc_data_deal &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_urc_data_deal
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_thread.o(.data)
</UL>
<P><STRONG><a name="[11b]"></a>key_scan</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, com.o(i.key_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = key_scan &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1]"></a>led_task_entry</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, user_main.o(i.led_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = led_task_entry &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_main.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>list</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cmd.o(i.list))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = list &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[4c]"></a>list_event</STRONG> (Thumb, 204 bytes, Stack size 96 bytes, cmd.o(i.list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[4e]"></a>list_mailbox</STRONG> (Thumb, 224 bytes, Stack size 104 bytes, cmd.o(i.list_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[47]"></a>list_mem</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mem.o(i.list_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = list_mem &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem.o(FSymTab)
</UL>
<P><STRONG><a name="[4d]"></a>list_mutex</STRONG> (Thumb, 168 bytes, Stack size 104 bytes, cmd.o(i.list_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_mutex &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[4b]"></a>list_sem</STRONG> (Thumb, 216 bytes, Stack size 96 bytes, cmd.o(i.list_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[4a]"></a>list_thread</STRONG> (Thumb, 294 bytes, Stack size 232 bytes, cmd.o(i.list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ps
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[4f]"></a>list_timer</STRONG> (Thumb, 190 bytes, Stack size 96 bytes, cmd.o(i.list_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = list_timer &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[129]"></a>$Super$$main</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = $Super$$main &rArr; creat_user_task &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_user_task
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetTemperature
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetHumidity
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[40]"></a>main_thread_entry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, components.o(i.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; creat_user_task &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[103]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeCmdDownFromStr
</UL>

<P><STRONG><a name="[105]"></a>motor_speed_control_DecodeCmdDown</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, aepservicecodes.o(i.motor_speed_control_DecodeCmdDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = motor_speed_control_DecodeCmdDown &rArr; StrToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorSpeed
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htons
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToHex
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeCmdDownFromStr
</UL>

<P><STRONG><a name="[12f]"></a>msh_auto_complete</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, msh.o(i.msh_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = msh_auto_complete &rArr; msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[115]"></a>msh_exec</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, msh.o(i.msh_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = msh_exec &rArr; _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[51]"></a>msh_help</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, msh.o(i.msh_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[10a]"></a>msh_is_used</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msh.o(i.msh_is_used))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[55]"></a>reboot_module</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, com.o(i.reboot_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = reboot_module &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(FSymTab)
</UL>
<P><STRONG><a name="[11a]"></a>recv_urc_data_deal</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, iot_thread.o(i.recv_urc_data_deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = recv_urc_data_deal &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeCmdDownFromStr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_recv_data_deal_entry
</UL>

<P><STRONG><a name="[133]"></a>rt_application_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, components.o(i.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[110]"></a>rt_calloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mem.o(i.rt_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rt_calloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[13e]"></a>rt_components_board_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[12d]"></a>rt_components_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[135]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(i.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[136]"></a>rt_exit_critical</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, scheduler.o(i.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[138]"></a>rt_free</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, mem.o(i.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[140]"></a>rt_heap_begin_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(i.rt_heap_begin_get))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[13f]"></a>rt_heap_end_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(i.rt_heap_end_get))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[13b]"></a>rt_hw_board_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, board.o(i.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_hw_board_init &rArr; SystemClock_Config &rArr; MX_RTC_Init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_heap_end_get
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_heap_begin_get
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysTick_Config
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[10e]"></a>rt_hw_console_getchar</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, shell.o(i.rt_hw_console_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_hw_console_getchar &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
</UL>

<P><STRONG><a name="[143]"></a>rt_hw_console_output</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, kservice.o(i.rt_hw_console_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_hw_console_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[132]"></a>rt_hw_cpu_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpuport.o(i.rt_hw_cpu_reset))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
</UL>

<P><STRONG><a name="[5a]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, cpuport.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[ec]"></a>rt_hw_stack_init</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, cpuport.o(i.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[d7]"></a>rt_interrupt_enter</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>rt_interrupt_leave</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>rt_kprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, kservice.o(i.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_creat_user_task
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_rtc_from_iot_module
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_cmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bc28_auto_registration
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_user_task
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_urc_data_deal
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_check_net_status_entry
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mem
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_set_time
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hello
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
</UL>

<P><STRONG><a name="[134]"></a>rt_malloc</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, mem.o(i.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[114]"></a>rt_memmove</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, kservice.o(i.rt_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[eb]"></a>rt_memset</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, kservice.o(i.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bc28_auto_registration
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[14d]"></a>rt_object_allocate</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, object.o(i.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[14f]"></a>rt_object_delete</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, object.o(i.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[151]"></a>rt_object_detach</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, object.o(i.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[126]"></a>rt_object_get_information</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, object.o(i.rt_object_get_information))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>

<P><STRONG><a name="[152]"></a>rt_object_init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, object.o(i.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[165]"></a>rt_object_is_systemobject</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_object_is_systemobject))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[f2]"></a>rt_ringbuffer_data_len</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ringbuffer.o(i.rt_ringbuffer_data_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ringbuffer_data_len
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_status
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_cmd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_recv_data_deal_entry
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
</UL>

<P><STRONG><a name="[f3]"></a>rt_ringbuffer_get</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ringbuffer.o(i.rt_ringbuffer_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_ringbuffer_get &rArr; rt_ringbuffer_data_len
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_cmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bc28_auto_registration
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_recv_data_deal_entry
</UL>

<P><STRONG><a name="[142]"></a>rt_ringbuffer_getchar</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ringbuffer.o(i.rt_ringbuffer_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_ringbuffer_getchar &rArr; rt_ringbuffer_data_len
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_getchar
</UL>

<P><STRONG><a name="[178]"></a>rt_ringbuffer_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ringbuffer.o(i.rt_ringbuffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ringbuffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init
</UL>

<P><STRONG><a name="[de]"></a>rt_ringbuffer_putchar</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ringbuffer.o(i.rt_ringbuffer_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_ringbuffer_putchar &rArr; rt_ringbuffer_data_len
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>rt_rtc_set_time</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, com.o(i.rt_rtc_set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = rt_rtc_set_time &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec2hex
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_rtc_from_iot_module
</UL>

<P><STRONG><a name="[137]"></a>rt_schedule</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, scheduler.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[159]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[15a]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[111]"></a>rt_sem_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[df]"></a>rt_sem_release</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[139]"></a>rt_sem_take</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_getchar
</UL>

<P><STRONG><a name="[15e]"></a>rt_show_version</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(i.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
</UL>

<P><STRONG><a name="[175]"></a>rt_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kservice.o(i.rt_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[131]"></a>rt_strncpy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kservice.o(i.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[141]"></a>rt_system_heap_init</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, mem.o(i.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_system_heap_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[15f]"></a>rt_system_scheduler_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, scheduler.o(i.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[161]"></a>rt_system_scheduler_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler.o(i.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_system_scheduler_start
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[163]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[177]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.rt_system_timer_thread_init))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[ff]"></a>rt_thread_create</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, thread.o(i.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_creat_user_task
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_user_task
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[3d]"></a>rt_thread_exit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, thread.o(i.rt_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_exit &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[167]"></a>rt_thread_idle_excute</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, idle.o(i.rt_thread_idle_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_has_defunct_thread
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[169]"></a>rt_thread_idle_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, idle.o(i.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[16a]"></a>rt_thread_init</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, thread.o(i.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[c3]"></a>rt_thread_mdelay</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, thread.o(i.rt_thread_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task_entry
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_cmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bc28_auto_registration
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc28_get_module_info
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetHumidity
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_recv_data_deal_entry
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_check_net_status_entry
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[146]"></a>rt_thread_resume</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, thread.o(i.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>

<P><STRONG><a name="[144]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(i.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[16c]"></a>rt_thread_sleep</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, thread.o(i.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[100]"></a>rt_thread_startup</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, thread.o(i.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_startup &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_creat_user_task
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_user_task
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[148]"></a>rt_thread_suspend</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, thread.o(i.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[3e]"></a>rt_thread_timeout</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, thread.o(i.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[16f]"></a>rt_thread_yield</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, thread.o(i.rt_thread_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_yield &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[16b]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, clock.o(i.rt_tick_from_millisecond))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[128]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
</UL>

<P><STRONG><a name="[dc]"></a>rt_tick_increase</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, clock.o(i.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[170]"></a>rt_timer_check</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, timer.o(i.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[15c]"></a>rt_timer_control</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, timer.o(i.rt_timer_control))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[164]"></a>rt_timer_detach</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, timer.o(i.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[ed]"></a>rt_timer_init</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, timer.o(i.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[15d]"></a>rt_timer_start</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, timer.o(i.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[16e]"></a>rt_timer_stop</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, timer.o(i.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[14c]"></a>rt_vsnprintf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, kservice.o(i.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[7c]"></a>rtthread_startup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, components.o(i.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rtthread_startup &rArr; rt_hw_board_init &rArr; SystemClock_Config &rArr; MX_RTC_Init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>set_onoff_DecodeCmdDown</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, aepservicecodes.o(i.set_onoff_DecodeCmdDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = set_onoff_DecodeCmdDown &rArr; StrToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToHex
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeCmdDownFromStr
</UL>

<P><STRONG><a name="[107]"></a>set_reporttime_DecodeCmdDown</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, aepservicecodes.o(i.set_reporttime_DecodeCmdDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = set_reporttime_DecodeCmdDown &rArr; StrToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htons
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToHex
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeCmdDownFromStr
</UL>

<P><STRONG><a name="[49]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.version))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[12a]"></a>user_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(i.user_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = user_init &rArr; HTS221_Calibration &rArr; I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_who_am_i
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[13d]"></a>_SysTick_Config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, board.o(i._SysTick_Config))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[ac]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[9e]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
</UL>

<P><STRONG><a name="[a3]"></a>RTC_DateUpdate</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, stm32f1xx_hal_rtc.o(i.RTC_DateUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RTC_DateUpdate &rArr; RTC_WeekDayNum
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WeekDayNum
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IsLeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
</UL>

<P><STRONG><a name="[a7]"></a>RTC_EnterInitMode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f1xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteTimeCounter
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteAlarmCounter
</UL>

<P><STRONG><a name="[a8]"></a>RTC_ExitInitMode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f1xx_hal_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_ExitInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteTimeCounter
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteAlarmCounter
</UL>

<P><STRONG><a name="[d6]"></a>RTC_IsLeapYear</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f1xx_hal_rtc.o(i.RTC_IsLeapYear))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DateUpdate
</UL>

<P><STRONG><a name="[a0]"></a>RTC_ReadAlarmCounter</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f1xx_hal_rtc.o(i.RTC_ReadAlarmCounter))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
</UL>

<P><STRONG><a name="[9f]"></a>RTC_ReadTimeCounter</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, stm32f1xx_hal_rtc.o(i.RTC_ReadTimeCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_ReadTimeCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
</UL>

<P><STRONG><a name="[ad]"></a>RTC_WeekDayNum</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, stm32f1xx_hal_rtc.o(i.RTC_WeekDayNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_WeekDayNum
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DateUpdate
</UL>

<P><STRONG><a name="[a2]"></a>RTC_WriteAlarmCounter</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f1xx_hal_rtc.o(i.RTC_WriteAlarmCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_WriteAlarmCounter &rArr; RTC_ExitInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
</UL>

<P><STRONG><a name="[a1]"></a>RTC_WriteTimeCounter</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f1xx_hal_rtc.o(i.RTC_WriteTimeCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_WriteTimeCounter &rArr; RTC_ExitInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
</UL>

<P><STRONG><a name="[9b]"></a>RCC_Delay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f1xx_hal_rcc.o(i.RCC_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[92]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[93]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[b1]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[b3]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[b4]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[bc]"></a>UART_SetConfig</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[be]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[c9]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[85]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, stm32f1xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[88]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, stm32f1xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[8a]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[84]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, stm32f1xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[c8]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, stm32f1xx_hal_i2c.o(i.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[86]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[89]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[44]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[43]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[46]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[42]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[168]"></a>_has_defunct_thread</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, idle.o(i._has_defunct_thread))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[41]"></a>rt_thread_idle_entry</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, idle.o(i.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(i.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[145]"></a>rt_ipc_list_resume</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ipc.o(i.rt_ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[147]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ipc.o(i.rt_ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[14a]"></a>rt_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(i.rt_ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>

<P><STRONG><a name="[14b]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>

<P><STRONG><a name="[149]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[15b]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[176]"></a>print_number</STRONG> (Thumb, 400 bytes, Stack size 60 bytes, kservice.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[174]"></a>skip_atoi</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, kservice.o(i.skip_atoi))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[13a]"></a>plug_holes</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[14e]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[150]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[160]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[ea]"></a>_rt_thread_init</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, thread.o(i._rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[166]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[16d]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[ee]"></a>_rt_timer_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, timer.o(i._rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[171]"></a>_rt_timer_remove</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, timer.o(i._rt_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>

<P><STRONG><a name="[ef]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[173]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[172]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[fb]"></a>bus_fault_track</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, cpuport.o(i.bus_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = bus_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[117]"></a>hard_fault_track</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, cpuport.o(i.hard_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = hard_fault_track &rArr; usage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[118]"></a>mem_manage_fault_track</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, cpuport.o(i.mem_manage_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = mem_manage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[119]"></a>usage_fault_track</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, cpuport.o(i.usage_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = usage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[11e]"></a>list_find_init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, cmd.o(i.list_find_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_find_init
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[120]"></a>list_get_next</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, cmd.o(i.list_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = list_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[11f]"></a>object_split</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmd.o(i.object_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[123]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmd.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[124]"></a>rt_list_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cmd.o(i.rt_list_len))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[125]"></a>show_wait_queue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cmd.o(i.show_wait_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[e4]"></a>_msh_exec_cmd</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, msh.o(i._msh_exec_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[e5]"></a>msh_get_cmd</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, msh.o(i.msh_get_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = msh_get_cmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[e6]"></a>msh_split</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, msh.o(i.msh_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[52]"></a>reboot</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, msh.o(i.reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reboot
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[130]"></a>str_common</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, msh.o(i.str_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[10d]"></a>finsh_getchar</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, shell.o(i.finsh_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = finsh_getchar &rArr; rt_hw_console_getchar &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[113]"></a>shell_auto_complete</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, shell.o(i.shell_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = shell_auto_complete &rArr; msh_auto_complete &rArr; msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[153]"></a>rt_ringbuffer_status</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ringbuffer.o(i.rt_ringbuffer_status))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>

<P><STRONG><a name="[56]"></a>datetime</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, com.o(i.datetime))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = datetime &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(FSymTab)
</UL>
<P><STRONG><a name="[c0]"></a>I2C_Read</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, hts221.o(i.I2C_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_who_am_i
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetTemperature
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetHumidity
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Calibration
</UL>

<P><STRONG><a name="[c2]"></a>I2C_Write</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, hts221.o(i.I2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_who_am_i
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetTemperature
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetHumidity
</UL>

<P><STRONG><a name="[e2]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e1]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[e8]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e7]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
